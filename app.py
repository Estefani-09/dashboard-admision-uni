
import pandas as pd
import streamlit as st
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

st.set_page_config(layout="wide")
st.title("üéì Predicci√≥n de Calificaci√≥n - Admisi√≥n UNI")
# Cargar datos
@st.cache_data
def cargar_datos():
    df = pd.read_csv('LIMPIO_ADMISION_UNI_OFICIAL0.csv', encoding='latin1', sep=';')
    
    # Convertir a tipos adecuados

    df['EDAD'] = 2024 - df['A√ëO_NACIMIENTO']
    df['CALIFICACI√ìN_FINAL'] = pd.to_numeric(df['CALIFICACI√ìN_FINAL'], errors='coerce')
    df['A√ëO_POSTULA'] = pd.to_numeric(df['A√ëO_POSTULA'], errors='coerce')
    df = df[['EDAD', 'G√âNERO', 'CALIFICACI√ìN_FINAL', 'A√ëO_POSTULA', 'ALCANZO_VACANTE', 'MODALIDAD']].dropna()
    df = pd.get_dummies(df, columns=['G√âNERO'], drop_first=False)
    return df

df = cargar_datos()

# ----------- SECCI√ìN 1: Predicci√≥n individual -----------

st.header("üîÆ Predicci√≥n de Calificaci√≥n por Edad y G√©nero")
X = df[['EDAD', 'G√âNERO_MASCULINO']] if 'G√âNERO_MASCULINO' in df.columns else df[['EDAD']]
y = df['CALIFICACI√ìN_FINAL']
modelo = LinearRegression()
modelo.fit(X, y)

edad = st.slider("üìÖ Edad del postulante", 15, 40, 18)
genero = st.selectbox("‚ößÔ∏è G√©nero", ["MASCULINO", "FEMENINO"])
genero_val = 1 if genero == "MASCULINO" else 0

if 'G√âNERO_MASCULINO' in df.columns:
    entrada = pd.DataFrame([[edad, genero_val]], columns=['EDAD', 'G√âNERO_MASCULINO'])
else:
    entrada = pd.DataFrame([[edad]], columns=['EDAD'])

pred = modelo.predict(entrada)[0]
st.metric("üéØ Calificaci√≥n estimada", f"{pred:.2f}")

# ----------- SECCI√ìN 2: Distribuci√≥n de Calificaciones -----------

st.subheader("üìä Distribuci√≥n de Calificaciones")
fig1, ax1 = plt.subplots()
df['CALIFICACI√ìN_FINAL'].hist(ax=ax1, bins=20)
st.pyplot(fig1)

# ----------- SECCI√ìN 3: Evoluci√≥n por A√±o y G√©nero -----------

if 'A√ëO_POSTULA' in df.columns:
    st.subheader("üìà Evoluci√≥n de Postulantes por A√±o y G√©nero")
    cols = [col for col in df.columns if 'G√âNERO_' in col]
    conteo = df.groupby(['A√ëO_POSTULA'])[cols].sum()
    conteo.columns = [c.replace('G√âNERO_', '') for c in conteo.columns]
    st.line_chart(conteo)

    # ----------- SECCI√ìN 4: Proyecci√≥n futura total -----------
    
    st.subheader("üìÖ Proyecci√≥n Futura de Postulantes")
    total_por_a√±o = df.groupby('A√ëO_POSTULA').size()
    a√±os = total_por_a√±o.index.values.reshape(-1, 1)
    postulantes = total_por_a√±o.values.reshape(-1, 1)

    modelo_futuro = LinearRegression()
    modelo_futuro.fit(a√±os, postulantes)

    futuros = np.arange(a√±os.max()+1, a√±os.max()+4).reshape(-1, 1)
    pred_futuros = modelo_futuro.predict(futuros)

    df_pred = pd.DataFrame(pred_futuros, index=futuros.flatten(), columns=["Proyectado"])
    st.line_chart(pd.concat([total_por_a√±o, df_pred.squeeze()], axis=0))

# ----------- SECCI√ìN 5: Comparaci√≥n de Calificaci√≥n por G√©nero -----------

st.subheader("‚öñÔ∏è Comparaci√≥n de Calificaciones por G√©nero")

# Asegurar que G√âNERO est√© presente para gr√°fico
if 'G√âNERO_MASCULINO' in df.columns:
    df['G√âNERO_LABEL'] = df['G√âNERO_MASCULINO'].apply(lambda x: "MASCULINO" if x == 1 else "FEMENINO")
else:
    df['G√âNERO_LABEL'] = df['G√âNERO_FEMENINO'].apply(lambda x: "FEMENINO" if x == 1 else "MASCULINO")

fig2, ax2 = plt.subplots()
sns.boxplot(x='G√âNERO_LABEL', y='CALIFICACI√ìN_FINAL', data=df, ax=ax2)
st.pyplot(fig2)

# ----------- SECCI√ìN 6: An√°lisis por MODALIDAD -----------

if 'MODALIDAD' in df.columns:
    st.subheader("üéì An√°lisis por Modalidad de Postulaci√≥n")

# Distribuci√≥n de calificaci√≥n por modalidad
    
    st.markdown("**Comparaci√≥n de calificaciones por modalidad**")
    fig3, ax3 = plt.subplots(figsize=(10, 4))
    sns.boxplot(x='MODALIDAD', y='CALIFICACI√ìN_FINAL', data=df, ax=ax3)
    ax3.tick_params(axis='x', rotation=45)
    st.pyplot(fig3)

        # Conteo de postulantes por modalidad y a√±o

    if 'A√ëO_POSTULA' in df.columns:
        st.markdown("**Evoluci√≥n de postulantes por modalidad y a√±o**")
        modalidad_anio = df.groupby(['A√ëO_POSTULA', 'MODALIDAD']).size().unstack(fill_value=0)
        st.line_chart(modalidad_anio)

        # Proyecci√≥n futura para cada modalidad (opcional b√°sico)
        
        st.markdown("**Selecciona una modalidad para proyectar su crecimiento:**")
        opcion_modalidad = st.selectbox("Modalidades disponibles:", modalidad_anio.columns.tolist())
        
        # Datos de la modalidad seleccionada
        serie = modalidad_anio[opcion_modalidad].reset_index()
        X_mod = serie[['A√ëO_POSTULA']]
        y_mod = serie[opcion_modalidad]
        
        if len(X_mod) >= 2:
            modelo_mod = LinearRegression()
            modelo_mod.fit(X_mod, y_mod)
        
            a√±os_futuros = np.arange(X_mod['A√ëO_POSTULA'].max() + 1, X_mod['A√ëO_POSTULA'].max() + 4).reshape(-1, 1)
            pred = modelo_mod.predict(a√±os_futuros)
        
            df_pred = pd.Series(pred, index=a√±os_futuros.flatten(), name='Proyecci√≥n')
            grafico = pd.concat([serie.set_index('A√ëO_POSTULA')[opcion_modalidad], df_pred])
        
            st.line_chart(grafico)
        else:
            st.warning("No hay suficientes datos para proyectar esta modalidad.")

        # ----------- SECCI√ìN 7: An√°lisis por Departamento y Distrito del Colegio -----------

        if 'COLEGIO_DEPARTAMENTO' in df.columns:
            st.subheader("üó∫Ô∏è An√°lisis por Departamento del Colegio")
        
            # Cantidad de postulantes por departamento
            dept_counts = df['COLEGIO_DEPARTAMENTO'].value_counts().sort_values(ascending=False)
            st.bar_chart(dept_counts)
        
            # Promedio de calificaci√≥n por departamento
            avg_by_dept = df.groupby('COLEGIO_DEPARTAMENTO')['CALIFICACI√ìN_FINAL'].mean().sort_values(ascending=False)
            st.subheader("üéì Promedio de Calificaciones por Departamento")
            st.bar_chart(avg_by_dept)
        
        if 'COLEGIO_DISTRITO' in df.columns:
            st.subheader("üèòÔ∏è An√°lisis por Distrito del Colegio")
        
            top_distritos = df['COLEGIO_DISTRITO'].value_counts().head(10).index.tolist()
            df_top = df[df['COLEGIO_DISTRITO'].isin(top_distritos)]
        
            # Calificaciones por distrito (boxplot solo para los 10 distritos con m√°s postulantes)
            fig_dist, ax_dist = plt.subplots(figsize=(10, 5))
            sns.boxplot(x='COLEGIO_DISTRITO', y='CALIFICACI√ìN_FINAL', data=df_top, ax=ax_dist)
            ax_dist.tick_params(axis='x', rotation=45)
            st.pyplot(fig_dist)


